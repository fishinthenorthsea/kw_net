// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: save_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_save_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_save_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "save_home.pb.h"
#include "save_play.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_save_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_save_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_save_5fdata_2eproto;
namespace KwSave {
class SaveSystem;
struct SaveSystemDefaultTypeInternal;
extern SaveSystemDefaultTypeInternal _SaveSystem_default_instance_;
class Save_Data;
struct Save_DataDefaultTypeInternal;
extern Save_DataDefaultTypeInternal _Save_Data_default_instance_;
}  // namespace KwSave
PROTOBUF_NAMESPACE_OPEN
template<> ::KwSave::SaveSystem* Arena::CreateMaybeMessage<::KwSave::SaveSystem>(Arena*);
template<> ::KwSave::Save_Data* Arena::CreateMaybeMessage<::KwSave::Save_Data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KwSave {

// ===================================================================

class SaveSystem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KwSave.SaveSystem) */ {
 public:
  inline SaveSystem() : SaveSystem(nullptr) {}
  ~SaveSystem() override;
  explicit PROTOBUF_CONSTEXPR SaveSystem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveSystem(const SaveSystem& from);
  SaveSystem(SaveSystem&& from) noexcept
    : SaveSystem() {
    *this = ::std::move(from);
  }

  inline SaveSystem& operator=(const SaveSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveSystem& operator=(SaveSystem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveSystem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveSystem* internal_default_instance() {
    return reinterpret_cast<const SaveSystem*>(
               &_SaveSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SaveSystem& a, SaveSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveSystem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveSystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveSystem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveSystem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SaveSystem& from) {
    SaveSystem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveSystem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KwSave.SaveSystem";
  }
  protected:
  explicit SaveSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaveHomeFieldNumber = 1,
    kSavePlayFieldNumber = 2,
  };
  // .KwSave.SaveHomeData save_home = 1;
  bool has_save_home() const;
  private:
  bool _internal_has_save_home() const;
  public:
  void clear_save_home();
  const ::KwSave::SaveHomeData& save_home() const;
  PROTOBUF_NODISCARD ::KwSave::SaveHomeData* release_save_home();
  ::KwSave::SaveHomeData* mutable_save_home();
  void set_allocated_save_home(::KwSave::SaveHomeData* save_home);
  private:
  const ::KwSave::SaveHomeData& _internal_save_home() const;
  ::KwSave::SaveHomeData* _internal_mutable_save_home();
  public:
  void unsafe_arena_set_allocated_save_home(
      ::KwSave::SaveHomeData* save_home);
  ::KwSave::SaveHomeData* unsafe_arena_release_save_home();

  // .KwSave.SavePlayData save_play = 2;
  bool has_save_play() const;
  private:
  bool _internal_has_save_play() const;
  public:
  void clear_save_play();
  const ::KwSave::SavePlayData& save_play() const;
  PROTOBUF_NODISCARD ::KwSave::SavePlayData* release_save_play();
  ::KwSave::SavePlayData* mutable_save_play();
  void set_allocated_save_play(::KwSave::SavePlayData* save_play);
  private:
  const ::KwSave::SavePlayData& _internal_save_play() const;
  ::KwSave::SavePlayData* _internal_mutable_save_play();
  public:
  void unsafe_arena_set_allocated_save_play(
      ::KwSave::SavePlayData* save_play);
  ::KwSave::SavePlayData* unsafe_arena_release_save_play();

  // @@protoc_insertion_point(class_scope:KwSave.SaveSystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::KwSave::SaveHomeData* save_home_;
    ::KwSave::SavePlayData* save_play_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_save_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Save_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KwSave.Save_Data) */ {
 public:
  inline Save_Data() : Save_Data(nullptr) {}
  ~Save_Data() override;
  explicit PROTOBUF_CONSTEXPR Save_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Save_Data(const Save_Data& from);
  Save_Data(Save_Data&& from) noexcept
    : Save_Data() {
    *this = ::std::move(from);
  }

  inline Save_Data& operator=(const Save_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Save_Data& operator=(Save_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Save_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Save_Data* internal_default_instance() {
    return reinterpret_cast<const Save_Data*>(
               &_Save_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Save_Data& a, Save_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Save_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Save_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Save_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Save_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Save_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Save_Data& from) {
    Save_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Save_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KwSave.Save_Data";
  }
  protected:
  explicit Save_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeSaveFieldNumber = 1,
    kPlaySaveFieldNumber = 2,
    kMapSaveFieldNumber = 3,
  };
  // .KwSave.SaveSystem homeSave = 1;
  bool has_homesave() const;
  private:
  bool _internal_has_homesave() const;
  public:
  void clear_homesave();
  const ::KwSave::SaveSystem& homesave() const;
  PROTOBUF_NODISCARD ::KwSave::SaveSystem* release_homesave();
  ::KwSave::SaveSystem* mutable_homesave();
  void set_allocated_homesave(::KwSave::SaveSystem* homesave);
  private:
  const ::KwSave::SaveSystem& _internal_homesave() const;
  ::KwSave::SaveSystem* _internal_mutable_homesave();
  public:
  void unsafe_arena_set_allocated_homesave(
      ::KwSave::SaveSystem* homesave);
  ::KwSave::SaveSystem* unsafe_arena_release_homesave();

  // .KwSave.SaveSystem playSave = 2;
  bool has_playsave() const;
  private:
  bool _internal_has_playsave() const;
  public:
  void clear_playsave();
  const ::KwSave::SaveSystem& playsave() const;
  PROTOBUF_NODISCARD ::KwSave::SaveSystem* release_playsave();
  ::KwSave::SaveSystem* mutable_playsave();
  void set_allocated_playsave(::KwSave::SaveSystem* playsave);
  private:
  const ::KwSave::SaveSystem& _internal_playsave() const;
  ::KwSave::SaveSystem* _internal_mutable_playsave();
  public:
  void unsafe_arena_set_allocated_playsave(
      ::KwSave::SaveSystem* playsave);
  ::KwSave::SaveSystem* unsafe_arena_release_playsave();

  // .KwSave.SaveSystem mapSave = 3;
  bool has_mapsave() const;
  private:
  bool _internal_has_mapsave() const;
  public:
  void clear_mapsave();
  const ::KwSave::SaveSystem& mapsave() const;
  PROTOBUF_NODISCARD ::KwSave::SaveSystem* release_mapsave();
  ::KwSave::SaveSystem* mutable_mapsave();
  void set_allocated_mapsave(::KwSave::SaveSystem* mapsave);
  private:
  const ::KwSave::SaveSystem& _internal_mapsave() const;
  ::KwSave::SaveSystem* _internal_mutable_mapsave();
  public:
  void unsafe_arena_set_allocated_mapsave(
      ::KwSave::SaveSystem* mapsave);
  ::KwSave::SaveSystem* unsafe_arena_release_mapsave();

  // @@protoc_insertion_point(class_scope:KwSave.Save_Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::KwSave::SaveSystem* homesave_;
    ::KwSave::SaveSystem* playsave_;
    ::KwSave::SaveSystem* mapsave_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_save_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SaveSystem

// .KwSave.SaveHomeData save_home = 1;
inline bool SaveSystem::_internal_has_save_home() const {
  return this != internal_default_instance() && _impl_.save_home_ != nullptr;
}
inline bool SaveSystem::has_save_home() const {
  return _internal_has_save_home();
}
inline const ::KwSave::SaveHomeData& SaveSystem::_internal_save_home() const {
  const ::KwSave::SaveHomeData* p = _impl_.save_home_;
  return p != nullptr ? *p : reinterpret_cast<const ::KwSave::SaveHomeData&>(
      ::KwSave::_SaveHomeData_default_instance_);
}
inline const ::KwSave::SaveHomeData& SaveSystem::save_home() const {
  // @@protoc_insertion_point(field_get:KwSave.SaveSystem.save_home)
  return _internal_save_home();
}
inline void SaveSystem::unsafe_arena_set_allocated_save_home(
    ::KwSave::SaveHomeData* save_home) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.save_home_);
  }
  _impl_.save_home_ = save_home;
  if (save_home) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KwSave.SaveSystem.save_home)
}
inline ::KwSave::SaveHomeData* SaveSystem::release_save_home() {
  
  ::KwSave::SaveHomeData* temp = _impl_.save_home_;
  _impl_.save_home_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KwSave::SaveHomeData* SaveSystem::unsafe_arena_release_save_home() {
  // @@protoc_insertion_point(field_release:KwSave.SaveSystem.save_home)
  
  ::KwSave::SaveHomeData* temp = _impl_.save_home_;
  _impl_.save_home_ = nullptr;
  return temp;
}
inline ::KwSave::SaveHomeData* SaveSystem::_internal_mutable_save_home() {
  
  if (_impl_.save_home_ == nullptr) {
    auto* p = CreateMaybeMessage<::KwSave::SaveHomeData>(GetArenaForAllocation());
    _impl_.save_home_ = p;
  }
  return _impl_.save_home_;
}
inline ::KwSave::SaveHomeData* SaveSystem::mutable_save_home() {
  ::KwSave::SaveHomeData* _msg = _internal_mutable_save_home();
  // @@protoc_insertion_point(field_mutable:KwSave.SaveSystem.save_home)
  return _msg;
}
inline void SaveSystem::set_allocated_save_home(::KwSave::SaveHomeData* save_home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.save_home_);
  }
  if (save_home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_home));
    if (message_arena != submessage_arena) {
      save_home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_home, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.save_home_ = save_home;
  // @@protoc_insertion_point(field_set_allocated:KwSave.SaveSystem.save_home)
}

// .KwSave.SavePlayData save_play = 2;
inline bool SaveSystem::_internal_has_save_play() const {
  return this != internal_default_instance() && _impl_.save_play_ != nullptr;
}
inline bool SaveSystem::has_save_play() const {
  return _internal_has_save_play();
}
inline const ::KwSave::SavePlayData& SaveSystem::_internal_save_play() const {
  const ::KwSave::SavePlayData* p = _impl_.save_play_;
  return p != nullptr ? *p : reinterpret_cast<const ::KwSave::SavePlayData&>(
      ::KwSave::_SavePlayData_default_instance_);
}
inline const ::KwSave::SavePlayData& SaveSystem::save_play() const {
  // @@protoc_insertion_point(field_get:KwSave.SaveSystem.save_play)
  return _internal_save_play();
}
inline void SaveSystem::unsafe_arena_set_allocated_save_play(
    ::KwSave::SavePlayData* save_play) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.save_play_);
  }
  _impl_.save_play_ = save_play;
  if (save_play) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KwSave.SaveSystem.save_play)
}
inline ::KwSave::SavePlayData* SaveSystem::release_save_play() {
  
  ::KwSave::SavePlayData* temp = _impl_.save_play_;
  _impl_.save_play_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KwSave::SavePlayData* SaveSystem::unsafe_arena_release_save_play() {
  // @@protoc_insertion_point(field_release:KwSave.SaveSystem.save_play)
  
  ::KwSave::SavePlayData* temp = _impl_.save_play_;
  _impl_.save_play_ = nullptr;
  return temp;
}
inline ::KwSave::SavePlayData* SaveSystem::_internal_mutable_save_play() {
  
  if (_impl_.save_play_ == nullptr) {
    auto* p = CreateMaybeMessage<::KwSave::SavePlayData>(GetArenaForAllocation());
    _impl_.save_play_ = p;
  }
  return _impl_.save_play_;
}
inline ::KwSave::SavePlayData* SaveSystem::mutable_save_play() {
  ::KwSave::SavePlayData* _msg = _internal_mutable_save_play();
  // @@protoc_insertion_point(field_mutable:KwSave.SaveSystem.save_play)
  return _msg;
}
inline void SaveSystem::set_allocated_save_play(::KwSave::SavePlayData* save_play) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.save_play_);
  }
  if (save_play) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_play));
    if (message_arena != submessage_arena) {
      save_play = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_play, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.save_play_ = save_play;
  // @@protoc_insertion_point(field_set_allocated:KwSave.SaveSystem.save_play)
}

// -------------------------------------------------------------------

// Save_Data

// .KwSave.SaveSystem homeSave = 1;
inline bool Save_Data::_internal_has_homesave() const {
  return this != internal_default_instance() && _impl_.homesave_ != nullptr;
}
inline bool Save_Data::has_homesave() const {
  return _internal_has_homesave();
}
inline void Save_Data::clear_homesave() {
  if (GetArenaForAllocation() == nullptr && _impl_.homesave_ != nullptr) {
    delete _impl_.homesave_;
  }
  _impl_.homesave_ = nullptr;
}
inline const ::KwSave::SaveSystem& Save_Data::_internal_homesave() const {
  const ::KwSave::SaveSystem* p = _impl_.homesave_;
  return p != nullptr ? *p : reinterpret_cast<const ::KwSave::SaveSystem&>(
      ::KwSave::_SaveSystem_default_instance_);
}
inline const ::KwSave::SaveSystem& Save_Data::homesave() const {
  // @@protoc_insertion_point(field_get:KwSave.Save_Data.homeSave)
  return _internal_homesave();
}
inline void Save_Data::unsafe_arena_set_allocated_homesave(
    ::KwSave::SaveSystem* homesave) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.homesave_);
  }
  _impl_.homesave_ = homesave;
  if (homesave) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KwSave.Save_Data.homeSave)
}
inline ::KwSave::SaveSystem* Save_Data::release_homesave() {
  
  ::KwSave::SaveSystem* temp = _impl_.homesave_;
  _impl_.homesave_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KwSave::SaveSystem* Save_Data::unsafe_arena_release_homesave() {
  // @@protoc_insertion_point(field_release:KwSave.Save_Data.homeSave)
  
  ::KwSave::SaveSystem* temp = _impl_.homesave_;
  _impl_.homesave_ = nullptr;
  return temp;
}
inline ::KwSave::SaveSystem* Save_Data::_internal_mutable_homesave() {
  
  if (_impl_.homesave_ == nullptr) {
    auto* p = CreateMaybeMessage<::KwSave::SaveSystem>(GetArenaForAllocation());
    _impl_.homesave_ = p;
  }
  return _impl_.homesave_;
}
inline ::KwSave::SaveSystem* Save_Data::mutable_homesave() {
  ::KwSave::SaveSystem* _msg = _internal_mutable_homesave();
  // @@protoc_insertion_point(field_mutable:KwSave.Save_Data.homeSave)
  return _msg;
}
inline void Save_Data::set_allocated_homesave(::KwSave::SaveSystem* homesave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.homesave_;
  }
  if (homesave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(homesave);
    if (message_arena != submessage_arena) {
      homesave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, homesave, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.homesave_ = homesave;
  // @@protoc_insertion_point(field_set_allocated:KwSave.Save_Data.homeSave)
}

// .KwSave.SaveSystem playSave = 2;
inline bool Save_Data::_internal_has_playsave() const {
  return this != internal_default_instance() && _impl_.playsave_ != nullptr;
}
inline bool Save_Data::has_playsave() const {
  return _internal_has_playsave();
}
inline void Save_Data::clear_playsave() {
  if (GetArenaForAllocation() == nullptr && _impl_.playsave_ != nullptr) {
    delete _impl_.playsave_;
  }
  _impl_.playsave_ = nullptr;
}
inline const ::KwSave::SaveSystem& Save_Data::_internal_playsave() const {
  const ::KwSave::SaveSystem* p = _impl_.playsave_;
  return p != nullptr ? *p : reinterpret_cast<const ::KwSave::SaveSystem&>(
      ::KwSave::_SaveSystem_default_instance_);
}
inline const ::KwSave::SaveSystem& Save_Data::playsave() const {
  // @@protoc_insertion_point(field_get:KwSave.Save_Data.playSave)
  return _internal_playsave();
}
inline void Save_Data::unsafe_arena_set_allocated_playsave(
    ::KwSave::SaveSystem* playsave) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playsave_);
  }
  _impl_.playsave_ = playsave;
  if (playsave) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KwSave.Save_Data.playSave)
}
inline ::KwSave::SaveSystem* Save_Data::release_playsave() {
  
  ::KwSave::SaveSystem* temp = _impl_.playsave_;
  _impl_.playsave_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KwSave::SaveSystem* Save_Data::unsafe_arena_release_playsave() {
  // @@protoc_insertion_point(field_release:KwSave.Save_Data.playSave)
  
  ::KwSave::SaveSystem* temp = _impl_.playsave_;
  _impl_.playsave_ = nullptr;
  return temp;
}
inline ::KwSave::SaveSystem* Save_Data::_internal_mutable_playsave() {
  
  if (_impl_.playsave_ == nullptr) {
    auto* p = CreateMaybeMessage<::KwSave::SaveSystem>(GetArenaForAllocation());
    _impl_.playsave_ = p;
  }
  return _impl_.playsave_;
}
inline ::KwSave::SaveSystem* Save_Data::mutable_playsave() {
  ::KwSave::SaveSystem* _msg = _internal_mutable_playsave();
  // @@protoc_insertion_point(field_mutable:KwSave.Save_Data.playSave)
  return _msg;
}
inline void Save_Data::set_allocated_playsave(::KwSave::SaveSystem* playsave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playsave_;
  }
  if (playsave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playsave);
    if (message_arena != submessage_arena) {
      playsave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playsave, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playsave_ = playsave;
  // @@protoc_insertion_point(field_set_allocated:KwSave.Save_Data.playSave)
}

// .KwSave.SaveSystem mapSave = 3;
inline bool Save_Data::_internal_has_mapsave() const {
  return this != internal_default_instance() && _impl_.mapsave_ != nullptr;
}
inline bool Save_Data::has_mapsave() const {
  return _internal_has_mapsave();
}
inline void Save_Data::clear_mapsave() {
  if (GetArenaForAllocation() == nullptr && _impl_.mapsave_ != nullptr) {
    delete _impl_.mapsave_;
  }
  _impl_.mapsave_ = nullptr;
}
inline const ::KwSave::SaveSystem& Save_Data::_internal_mapsave() const {
  const ::KwSave::SaveSystem* p = _impl_.mapsave_;
  return p != nullptr ? *p : reinterpret_cast<const ::KwSave::SaveSystem&>(
      ::KwSave::_SaveSystem_default_instance_);
}
inline const ::KwSave::SaveSystem& Save_Data::mapsave() const {
  // @@protoc_insertion_point(field_get:KwSave.Save_Data.mapSave)
  return _internal_mapsave();
}
inline void Save_Data::unsafe_arena_set_allocated_mapsave(
    ::KwSave::SaveSystem* mapsave) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapsave_);
  }
  _impl_.mapsave_ = mapsave;
  if (mapsave) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KwSave.Save_Data.mapSave)
}
inline ::KwSave::SaveSystem* Save_Data::release_mapsave() {
  
  ::KwSave::SaveSystem* temp = _impl_.mapsave_;
  _impl_.mapsave_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KwSave::SaveSystem* Save_Data::unsafe_arena_release_mapsave() {
  // @@protoc_insertion_point(field_release:KwSave.Save_Data.mapSave)
  
  ::KwSave::SaveSystem* temp = _impl_.mapsave_;
  _impl_.mapsave_ = nullptr;
  return temp;
}
inline ::KwSave::SaveSystem* Save_Data::_internal_mutable_mapsave() {
  
  if (_impl_.mapsave_ == nullptr) {
    auto* p = CreateMaybeMessage<::KwSave::SaveSystem>(GetArenaForAllocation());
    _impl_.mapsave_ = p;
  }
  return _impl_.mapsave_;
}
inline ::KwSave::SaveSystem* Save_Data::mutable_mapsave() {
  ::KwSave::SaveSystem* _msg = _internal_mutable_mapsave();
  // @@protoc_insertion_point(field_mutable:KwSave.Save_Data.mapSave)
  return _msg;
}
inline void Save_Data::set_allocated_mapsave(::KwSave::SaveSystem* mapsave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mapsave_;
  }
  if (mapsave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mapsave);
    if (message_arena != submessage_arena) {
      mapsave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapsave, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mapsave_ = mapsave;
  // @@protoc_insertion_point(field_set_allocated:KwSave.Save_Data.mapSave)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KwSave

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_save_5fdata_2eproto
